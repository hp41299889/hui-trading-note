// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  secrets       Secret[]
  mentals       Mental[]
  orders        Order[]
  historyOrders HistoryOrder[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Secret {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      String
  apiKey    String
  secretKey String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Mental {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  method    String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Order {
  id         String   @id
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  price      Decimal
  amount     Decimal
  takeProfit Decimal?
  stopLose   Decimal?
  reason     String?
  userId     String
  user       User     @relation(fields: [userId], references: [id])
}

model HistoryOrder {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  open      Decimal
  close     Decimal
  reason    String
  review    String?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}
